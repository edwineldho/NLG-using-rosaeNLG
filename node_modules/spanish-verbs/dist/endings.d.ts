/**
 * @license
 * Copyright 2019 Ludan Stoeckl√©, 2017, HealthTap, Inc.
 * SPDX-License-Identifier: Apache-2.0
 */
export interface EndingsSuffix {
    ar: EndingSuffix;
    ir: EndingSuffix;
    er: EndingSuffix;
}
export interface EndingSuffix {
    infinitive: string;
    gerund: string;
    'past participle': {
        singular: {
            masculine: string;
            feminine: string;
        };
        plural: {
            masculine: string;
            feminine: string;
        };
    };
    first: EndingsPerPerson;
    second: EndingsPerPerson;
    third: EndingsPerPerson;
}
export interface EndingsPerPerson {
    singular: EndingsPerPersonPerNumber;
    plural: EndingsPerPersonPerNumber;
}
export interface TuVos {
    tu: string;
    vos: string;
}
export interface EndingsPerPersonPerNumber {
    indicative: {
        present: string | TuVos;
        imperfect: string;
        preterite: string | TuVos;
        future: string;
    };
    subjunctive: {
        present: string | TuVos;
        'imperfect -ra': string;
        'imperfect -se': string;
        future: string;
    };
    conditional: string;
    imperative?: string | {
        affirmative: string | TuVos;
        negative: string | TuVos;
    };
}
export declare const endingsSuffix: EndingsSuffix;
export interface EndingsAuxPersonNumber {
    indicative: {
        perfect: string;
        pluperfect: string;
        'future perfect': string;
        'preterite perfect': string;
    };
    subjunctive: {
        perfect: string;
        pluperfect: string;
        'future perfect': string;
    };
    conditional: {
        perfect: string;
    };
}
export interface EndingsAuxPerson {
    singular: EndingsAuxPersonNumber;
    plural: EndingsAuxPersonNumber;
}
export interface EndingsAux {
    first: EndingsAuxPerson;
    second: EndingsAuxPerson;
    third: EndingsAuxPerson;
}
export declare const endingsAux: EndingsAux;
