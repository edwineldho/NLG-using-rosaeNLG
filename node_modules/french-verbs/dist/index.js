"use strict";
/**
 * @license
 * Copyright 2019 Ludan Stoecklé
 * SPDX-License-Identifier: Apache-2.0
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConjugation = exports.isTransitive = exports.alwaysAuxEtre = exports.getVerbInfo = void 0;
/*

8 temps de l'indicatif :
  Présent
  Passé composé
  Imparfait
  Plus-que-parfait
  Passé simple
  Passé antérieur
  Futur simple
  Futur antérieur

4 temps du subjonctif :
  Présent
  Passé
  Imparfait
  Plus-que-parfait

3 temps du conditionnel :
  Présent
  Passé 1ère forme
  Passé 2ème forme

2 temps de l'impératif :
  Présent
  Passé

2 temps du participe :
  Présent
  Passé

2 temps de l'infinitif :
  Présent
  Passé

2 temps du gérondif :
  Présent
  Passé
*/
const french_contractions_1 = require("french-contractions");
const conjAvoir = {
    P: ['ai', 'as', 'a', 'avons', 'avez', 'ont'],
    S: ['aie', 'aies', 'ait', 'ayons', 'ayez', 'aient'],
    Y: ['NA', 'aie', 'NA', 'ayons', 'ayez', 'NA'],
    F: ['aurai', 'auras', 'aura', 'aurons', 'aurez', 'auront'],
    C: ['aurais', 'aurais', 'aurait', 'aurions', 'auriez', 'auraient'],
    I: ['avais', 'avais', 'avait', 'avions', 'aviez', 'avaient'],
    W: ['avoir'],
    G: ['ayant'],
    K: ['eu', 'eus', 'eue', 'eues'],
    J: ['eus', 'eus', 'eut', 'eûmes', 'eûtes', 'eurent'],
    T: ['eusse', 'eusses', 'eût', 'eussions', 'eussiez', 'eussent'],
};
const conjEtre = {
    P: ['suis', 'es', 'est', 'sommes', 'êtes', 'sont'],
    J: ['fus', 'fus', 'fut', 'fûmes', 'fûtes', 'furent'],
    T: ['fusse', 'fusses', 'fût', 'fussions', 'fussiez', 'fussent'],
    F: ['serai', 'seras', 'sera', 'serons', 'serez', 'seront'],
    C: ['serais', 'serais', 'serait', 'serions', 'seriez', 'seraient'],
    S: ['sois', 'sois', 'soit', 'soyons', 'soyez', 'soient'],
    Y: ['NA', 'sois', 'NA', 'soyons', 'soyez', 'NA'],
    I: ['étais', 'étais', 'était', 'étions', 'étiez', 'étaient'],
    G: ['étant'],
    K: ['été', 'été', 'été', 'été'],
    W: ['être'],
};
function getVerbInfo(verbsInfo, verb) {
    if (verb === 'avoir')
        return conjAvoir;
    if (verb === 'être')
        return conjEtre;
    if (!verbsInfo) {
        const err = new Error();
        err.name = 'TypeError';
        err.message = 'verbs list must not be null';
        throw err;
    }
    const verbInfo = verbsInfo[verb];
    if (!verbInfo) {
        const err = new Error();
        err.name = 'NotFoundInDict';
        err.message = `${verb} not in dict`;
        throw err;
    }
    return verbInfo;
}
exports.getVerbInfo = getVerbInfo;
// is required at runtime (not only comp)
const listEtre = [
    'aller',
    'apparaître',
    'arriver',
    'débeller',
    'décéder',
    'devenir',
    'échoir',
    'entrer',
    'intervenir',
    'mourir',
    'naitre',
    'naître',
    'partir',
    'parvenir',
    'provenir',
    'redevenir',
    'repartir',
    'rester',
    'resurvenir',
    'retomber',
    'revenir',
    'survenir',
    'tomber',
    'venir',
];
function alwaysAuxEtre(verb) {
    return listEtre.indexOf(verb) > -1;
}
exports.alwaysAuxEtre = alwaysAuxEtre;
const transitive_json_1 = __importDefault(require("french-verbs-transitive/dist/transitive.json"));
function isTransitive(verb) {
    return transitive_json_1.default.indexOf(verb) > -1;
}
exports.isTransitive = isTransitive;
const validTenses = [
    'PRESENT',
    'FUTUR',
    'IMPARFAIT',
    'PASSE_SIMPLE',
    'CONDITIONNEL_PRESENT',
    'IMPERATIF_PRESENT',
    'SUBJONCTIF_PRESENT',
    'SUBJONCTIF_IMPARFAIT',
    'PASSE_COMPOSE',
    'PLUS_QUE_PARFAIT',
];
function getAux(verb, aux, pronominal) {
    if (aux) {
        if (aux != 'AVOIR' && aux != 'ETRE') {
            const err = new Error();
            err.name = 'InvalidArgumentError';
            err.message = `aux must be AVOIR or ETRE`;
            throw err;
        }
        else {
            return aux;
        }
    }
    else {
        if (pronominal) {
            return 'ETRE';
        }
        else if (alwaysAuxEtre(verb)) {
            return 'ETRE';
        }
        else if (isTransitive(verb)) {
            return 'AVOIR'; // rather AVOIR if not specified
        }
        else {
            const err = new Error();
            err.name = 'InvalidArgumentError';
            err.message = `aux property must be set with this tense for ${verb}`;
            throw err;
        }
    }
}
function getConjugatedPasseComposePlusQueParfait(verbInfo, verb, tense, person, composedTenseOptions, pronominal) {
    if (!composedTenseOptions) {
        const err = new Error();
        err.name = 'TypeError';
        err.message = `ComposedTenseOptions is mandatory when tense is PASSE_COMPOSE or PLUS_QUE_PARFAIT`;
        throw err;
    }
    const agreeGender = composedTenseOptions.agreeGender || 'M';
    const agreeNumber = composedTenseOptions.agreeNumber || 'S';
    const aux = getAux(verb, composedTenseOptions.aux, pronominal);
    const tempsAux = tense === 'PASSE_COMPOSE' ? 'P' : 'I'; // présent ou imparfait
    const conjugatedAux = getVerbInfo(null, aux === 'AVOIR' ? 'avoir' : 'être')[tempsAux][person];
    const participePasseList = verbInfo['K'];
    if (!participePasseList) {
        const err = new Error();
        err.name = 'InvalidArgumentError';
        err.message = `no participe passé for ${verb}`;
        throw err;
    }
    const mappingGenderNumber = { MS: 0, MP: 1, FS: 2, FP: 3 };
    const indexGenderNumber = mappingGenderNumber[agreeGender + agreeNumber];
    const participePasse = participePasseList[indexGenderNumber];
    /* istanbul ignore if */
    if (!participePasse) {
        const err = new Error();
        err.name = 'InvalidArgumentError';
        err.message = `no participe passé form for ${verb}`;
        throw err;
    }
    return `${conjugatedAux} ${participePasse}`;
}
function getConjugatedNoComposed(verbInfo, verb, tense, person) {
    const tenseMapping = {
        PRESENT: 'P',
        FUTUR: 'F',
        IMPARFAIT: 'I',
        PASSE_SIMPLE: 'J',
        CONDITIONNEL_PRESENT: 'C',
        IMPERATIF_PRESENT: 'Y',
        SUBJONCTIF_PRESENT: 'S',
        SUBJONCTIF_IMPARFAIT: 'T', // subjonctif imparfait
        //'PARTICIPE_PASSE': 'K', // participe passé
        //'PARTICIPE_PRESENT': 'G', // participe présent
        //'INFINITIF': 'W' // infinitif présent
    };
    const indexTemps = tenseMapping[tense];
    const tenseInLib = verbInfo[indexTemps];
    if (!tenseInLib) {
        const err = new Error();
        err.name = 'InvalidArgumentError';
        err.message = `${tense} tense not available in French for ${verb}`;
        throw err;
    }
    const formInLib = tenseInLib[person];
    if (!formInLib || formInLib === 'NA') {
        const err = new Error();
        err.name = 'InvalidArgumentError';
        err.message = `person ${person} not available in French for ${verb} in ${tense}`;
        throw err;
    }
    return formInLib;
}
function processPronominal(verb, person, conjugated) {
    const pronominalMapping = ['me', 'te', 'se', 'nous', 'vous', 'se'];
    let contract = false;
    if ([0, 1, 2, 5].indexOf(person) > -1) {
        // potential contraction
        // for the h muet test: take infinitive, not conjugated form (list does not contain flex forms)
        if ((french_contractions_1.beginsWithVowel(conjugated) && french_contractions_1.isContractedVowelWord(conjugated)) || french_contractions_1.isHMuet(verb)) {
            contract = true;
        }
    }
    if (contract) {
        return `${pronominalMapping[person].substring(0, 1)}'${conjugated}`;
    }
    else {
        return `${pronominalMapping[person]} ${conjugated}`;
    }
}
function getConjugation(verbsList, verb, tense, person, composedTenseOptions, pronominal) {
    if (!verb) {
        const err = new Error();
        err.name = 'TypeError';
        err.message = 'verb must not be null';
        throw err;
    }
    if (person == null) {
        const err = new Error();
        err.name = 'TypeError';
        err.message = 'person must not be null';
        throw err;
    }
    if (!tense || validTenses.indexOf(tense) === -1) {
        const err = new Error();
        err.name = 'TypeError';
        err.message = `tense must be ${validTenses.join()}`;
        throw err;
    }
    // s'écrier, se rendre...
    if (verb.startsWith('se ')) {
        pronominal = true;
        verb = verb.replace(/^se\s+/, '');
    }
    else if (verb.startsWith("s'")) {
        pronominal = true;
        verb = verb.replace(/^s'\s*/, '');
    }
    const verbInfo = getVerbInfo(verbsList, verb);
    let conjugated;
    if (tense === 'PASSE_COMPOSE' || tense === 'PLUS_QUE_PARFAIT') {
        conjugated = getConjugatedPasseComposePlusQueParfait(verbInfo, verb, tense, person, composedTenseOptions, pronominal);
    }
    else {
        conjugated = getConjugatedNoComposed(verbInfo, verb, tense, person);
    }
    if (pronominal) {
        return processPronominal(verb, person, conjugated);
    }
    else {
        return conjugated;
    }
}
exports.getConjugation = getConjugation;
//# sourceMappingURL=index.js.map