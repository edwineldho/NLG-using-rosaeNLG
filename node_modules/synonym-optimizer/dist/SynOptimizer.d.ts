/**
 * @license
 * Copyright 2019 Ludan Stoeckl√©
 * SPDX-License-Identifier: Apache-2.0
 */
interface WordsWithPos {
    [key: string]: number[];
}
interface IdenticalsMap {
    [key: string]: string;
}
export interface DebugHolder {
    filteredAlt?: string[];
    identicals?: string[][];
    identicalsMap?: IdenticalsMap;
    wordsWithPos?: WordsWithPos;
    score?: number;
}
export declare class SynOptimizer {
    private languageSyn;
    constructor(language: string);
    getStopWords(stopWordsToAdd: string[], stopWordsToRemove: string[], stopWordsOverride: string[]): string[];
    scoreAlternative(alternative: string, stopWordsToAdd: string[], stopWordsToRemove: string[], stopWordsOverride: string[], identicals: string[][], debugHolder: DebugHolder): number;
    getStemmedWords(text: string, stopwords: string[]): string[];
    getBest(alternatives: string[], stopWordsToAdd: string[], stopWordsToRemove: string[], stopWordsOverride: string[], identicals: string[][]): number;
    getScore(wordsWithPos: WordsWithPos): number;
    stemWord(word: string): string;
    getWordsWithPos(words: string[], identicals: string[][], debugHolder: DebugHolder): WordsWithPos;
}
export {};
