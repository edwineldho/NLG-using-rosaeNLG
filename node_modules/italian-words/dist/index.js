"use strict";
/**
 * @license
 * Copyright 2019 Ludan Stoeckl√©
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGenderItalianWord = exports.getNumberItalianWord = exports.getWordInfo = void 0;
function getWordInfo(wordsList, word) {
    if (!wordsList) {
        const err = new Error();
        err.name = 'InvalidArgumentError';
        err.message = `words list must not be null`;
        throw err;
    }
    if (wordsList[word]) {
        return wordsList[word];
    }
    else {
        const err = new Error();
        err.name = 'NotFoundInDict';
        err.message = `${word} was not found in Italian dict`;
        throw err;
    }
}
exports.getWordInfo = getWordInfo;
function getNumberHelper(wordsList, word, number) {
    if (wordsList && wordsList[word]) {
        const wordInfo = wordsList[word];
        if (number == 'S') {
            return wordInfo['S'] || word; // default value is the key
        }
        else if (wordInfo['P']) {
            return wordInfo['P'];
        }
    }
    return null;
}
function getNumberItalianWord(wordsListException, wordsList, word, number) {
    if (number != 'S' && number != 'P') {
        const err = new Error();
        err.name = 'InvalidArgumentError';
        err.message = `number must be S or P`;
        throw err;
    }
    const res = getNumberHelper(wordsListException, word, number) || getNumberHelper(wordsList, word, number);
    if (res) {
        return res;
    }
    const err = new Error();
    err.name = 'NotInDictError';
    err.message = `${number} form not found for ${word}!`;
    throw err;
}
exports.getNumberItalianWord = getNumberItalianWord;
function getGenderHelper(wordsList, word) {
    if (wordsList && wordsList[word] && wordsList[word]['G']) {
        return wordsList[word]['G'];
    }
    return null;
}
function getGenderItalianWord(wordsListException, wordsList, word) {
    const gender = getGenderHelper(wordsListException, word) || getGenderHelper(wordsList, word);
    if (gender) {
        return gender;
    }
    else {
        const err = new Error();
        err.name = 'NotFoundInDict';
        err.message = `${word} was not found in Italian dict for gender`;
        throw err;
    }
}
exports.getGenderItalianWord = getGenderItalianWord;
//# sourceMappingURL=index.js.map