/**
 * @license
 * Copyright 2019 Ludan Stoeckl√©
 * SPDX-License-Identifier: Apache-2.0
 */
import { DetParams, DetTypes, LanguageImpl, SomeTense, AgreeAdjParams, GrammarParsed } from './LanguageImpl';
import { GenderNumberManager } from './GenderNumberManager';
import { SpyI } from './Spy';
import { Genders, Numbers } from './NlgLib';
import { VerbsData } from 'rosaenlg-pug-code-gen';
import 'numeral/locales/de';
import { ConjParams, VerbParts } from './VerbsManager';
import { GermanAux, PronominalCase } from 'german-verbs';
import { LanguageCommon } from 'rosaenlg-commons';
import { Helper } from './Helper';
export declare type GermanCases = 'NOMINATIVE' | 'ACCUSATIVE' | 'DATIVE' | 'GENITIVE';
interface ConjParamsDe extends ConjParams {
    tense: string;
    pronominalCase: PronominalCase;
    aux: GermanAux;
}
export declare class LanguageGerman extends LanguageImpl {
    iso2: string;
    langForNumeral: string;
    langForDateFns: Locale;
    n2wordsLang: string;
    n2wordsLib: any;
    floatingPointWord: string;
    table0to9: string[];
    hasGender: boolean;
    hasNeutral: boolean;
    defaultAdjPos: string;
    hasCase: boolean;
    defaultCase: string;
    userGenderOwnedForGender: boolean;
    supportsInvertSubjectVerb: boolean;
    defaultTense: string;
    canPopVerbPart: boolean;
    defaultLastSeparatorForAdjectives: string;
    universalMapping: {
        UNIVERSAL_PRESENT: string;
        UNIVERSAL_PAST: string;
        UNIVERSAL_FUTURE: string;
        UNIVERSAL_PERFECT: string;
        UNIVERSAL_PLUPERFECT: string;
    };
    spacesWhenSeparatingElements: boolean;
    constructor(languageCommon: LanguageCommon);
    getDet(det: DetTypes, params: DetParams): string;
    getAgreeAdj(adjective: string, gender: Genders, number: Numbers, _subject: any, params: AgreeAdjParams): string;
    getWordGender(word: string): Genders;
    getOrdinal(val: number, _gender: Genders): string;
    getSubstantive(subst: string, number: Numbers, theCase: GermanCases): string;
    parseSimplifiedString(val: string): GrammarParsed;
    thirdPossessionTriggerRef(owner: any, owned: any, params: any, spy: SpyI, helper: Helper): void;
    thirdPossessionRefTriggered(owner: any, owned: any, params: any, spy: SpyI, genderNumberManager: GenderNumberManager): void;
    getConjugation(_subject: any, verb: string, originalTense: SomeTense, number: Numbers, conjParams: ConjParamsDe, _genderNumberManager: GenderNumberManager, embeddedVerbs: VerbsData, verbParts: VerbParts): string;
    isPlural(val: number): boolean;
}
export {};
