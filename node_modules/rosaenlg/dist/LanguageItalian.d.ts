/**
 * @license
 * Copyright 2019 Ludan Stoeckl√©
 * SPDX-License-Identifier: Apache-2.0
 */
import { DetParams, LanguageImpl, AgreeAdjParams, SomeTense, DetTypes, GrammarParsed } from './LanguageImpl';
import { GenderNumberManager } from './GenderNumberManager';
import { Genders, Numbers } from './NlgLib';
import { ConjParams } from './VerbsManager';
import { VerbsData } from 'rosaenlg-pug-code-gen';
import 'numeral/locales/it';
import { ItalianAux } from 'italian-verbs';
import { LanguageCommon } from 'rosaenlg-commons';
interface ConjParamsIt extends ConjParams {
    tense: string;
    agree: any;
    aux: ItalianAux;
}
export declare class LanguageItalian extends LanguageImpl {
    iso2: string;
    langForNumeral: string;
    langForDateFns: Locale;
    n2wordsLang: string;
    n2wordsLib: any;
    floatingPointWord: string;
    table0to9: string[];
    hasGender: boolean;
    hasNeutral: boolean;
    defaultAdjPos: string;
    eatSpaceWhenAdjEndsWithApostrophe: boolean;
    defaultTense: string;
    defaultLastSeparatorForAdjectives: string;
    universalMapping: {
        UNIVERSAL_PRESENT: string;
        UNIVERSAL_PAST: string;
        UNIVERSAL_FUTURE: string;
        UNIVERSAL_PERFECT: string;
        UNIVERSAL_PLUPERFECT: string;
    };
    spacesWhenSeparatingElements: boolean;
    constructor(languageCommon: LanguageCommon);
    getDet(det: DetTypes, params: DetParams): string;
    getAgreeAdj(adjective: string, gender: Genders, number: Numbers, subject: any, params: AgreeAdjParams): string;
    getWordGender(word: string): Genders;
    getOrdinal(val: number, gender: Genders): string;
    getFormattedNominalGroup(possessiveAdj: string, adjBefore: string, substantive: string, adjAfter: string): string;
    getSubstantive(subst: string, number: Numbers): string;
    parseSimplifiedString(val: string): GrammarParsed;
    getConjugation(_subject: any, verb: string, originalTense: SomeTense, number: Numbers, conjParams: ConjParamsIt, genderNumberManager: GenderNumberManager, embeddedVerbs: VerbsData): string;
    isPlural(val: number): boolean;
}
export {};
