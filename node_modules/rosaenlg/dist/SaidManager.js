"use strict";
/**
 * @license
 * Copyright 2019 Ludan Stoeckl√©
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SaidManager = void 0;
class SaidManager {
    //spy: Spy;
    constructor() {
        this.hasSaidMap = {};
    }
    getHasSaidMap() {
        return this.hasSaidMap;
    }
    setHasSaidMap(hasSaidMap) {
        this.hasSaidMap = hasSaidMap;
    }
    recordSaid(key) {
        if (!key) {
            const err = new Error();
            err.name = 'InvalidArgumentError';
            err.message = 'recordSaid has null arg';
            throw err;
        }
        this.hasSaidMap[key] = true;
    }
    deleteSaid(key) {
        if (this.hasSaid(key)) {
            delete this.hasSaidMap[key];
        }
    }
    hasSaid(key) {
        if (!key) {
            const err = new Error();
            err.name = 'InvalidArgumentError';
            err.message = 'hasSaid has null arg';
            throw err;
        }
        const val = this.hasSaidMap[key];
        if (val == null) {
            return false;
        }
        else {
            if (typeof val !== 'boolean') {
                const err = new Error();
                err.name = 'InvalidArgumentError';
                err.message = `hasSaid value is not a boolean but ${val}`;
                throw err;
            }
            else {
                return val;
            }
        }
    }
    recordValue(key, value) {
        if (!key) {
            const err = new Error();
            err.name = 'InvalidArgumentError';
            err.message = 'recordValue has null key arg';
            throw err;
        }
        if (typeof value !== 'boolean' && typeof value !== 'string' && typeof value !== 'number') {
            const err = new Error();
            err.name = 'InvalidArgumentError';
            err.message = 'recordValue has invalid value arg, must be boolean, string or number';
            throw err;
        }
        this.hasSaidMap[key] = value;
    }
    getValue(key) {
        if (typeof key === 'undefined' || key === null) {
            const err = new Error();
            err.name = 'InvalidArgumentError';
            err.message = 'getValue has null arg';
            throw err;
        }
        return this.hasSaidMap[key];
    }
    deleteValue(key) {
        this.getValue(key); // just to test the key
        this.hasSaidMap[key] = null;
    }
    getDumpHasSaid() {
        return JSON.stringify(this.hasSaidMap);
    }
    /* istanbul ignore next */
    dumpHasSaid() {
        console.log(this.getDumpHasSaid());
    }
    getHasSaidCopy() {
        return Object.assign({}, this.hasSaidMap);
    }
}
exports.SaidManager = SaidManager;
//# sourceMappingURL=SaidManager.js.map