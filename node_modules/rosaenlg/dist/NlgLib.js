"use strict";
/**
 * @license
 * Copyright 2019 Ludan StoecklÃ©
 * SPDX-License-Identifier: Apache-2.0
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NlgLib = exports.getRosaeNlgVersion = void 0;
const ValueManager_1 = require("./ValueManager");
const SynManager_1 = require("./SynManager");
const ChoosebestManager_1 = require("./ChoosebestManager");
const VerbsManager_1 = require("./VerbsManager");
const RefsManager_1 = require("./RefsManager");
const rosaenlg_filter_1 = require("rosaenlg-filter");
const AdjectiveManager_1 = require("./AdjectiveManager");
const AsmManager_1 = require("./AsmManager");
const Helper_1 = require("./Helper");
const PossessiveManager_1 = require("./PossessiveManager");
const SentenceManager_1 = require("./SentenceManager");
const SaveRollbackManager_1 = require("./SaveRollbackManager");
const RandomManager_1 = require("./RandomManager");
const Spy_1 = require("./Spy");
const rosaenlg_commons_1 = require("rosaenlg-commons");
const languageHelper_1 = require("./languageHelper");
const numeral_1 = __importDefault(require("numeral"));
const GenderNumberManager_1 = require("./GenderNumberManager");
const SaidManager_1 = require("./SaidManager");
function getRosaeNlgVersion() {
    return '3.2.3'; // will be replaced by gulp when copied into dist/
}
exports.getRosaeNlgVersion = getRosaeNlgVersion;
class NlgLib {
    constructor(params) {
        // forceRandomSeed can be 0 and be valid so test not null
        this.randomSeed =
            params && params.forceRandomSeed != null ? params.forceRandomSeed : Math.floor(Math.random() * 1000); //NOSONAR
        //console.log("seed: " + this.randomSeed);
        this.randomManager = new RandomManager_1.RandomManager(this.randomSeed);
        if (params && params.language) {
            this.language = params.language;
        }
        else {
            const err = new Error();
            err.name = 'InvalidArgumentError';
            err.message = `must provide a language ('language' param)`;
            throw err;
        }
        this.renderDebug = params.renderDebug;
        const iso2 = rosaenlg_commons_1.getIso2fromLocale(this.language);
        this.languageImpl = languageHelper_1.languageImplfromIso2(iso2);
        {
            // referencing libs for custom user usage
            // for numeral
            this.numeral = numeral_1.default;
        }
        this.saveRollbackManager = new SaveRollbackManager_1.SaveRollbackManager();
        this.genderNumberManager = new GenderNumberManager_1.GenderNumberManager(this.languageImpl);
        this.helper = new Helper_1.Helper(this.genderNumberManager, this.saveRollbackManager, this.languageImpl, params.renderDebug);
        this.synManager = new SynManager_1.SynManager(this.randomManager, this.saveRollbackManager, this.helper, {
            defaultSynoMode: params.defaultSynoMode || 'random',
        });
        this.verbsManager = new VerbsManager_1.VerbsManager(this.languageImpl, this.genderNumberManager, this.synManager, this.saveRollbackManager, this.helper);
        this.choosebestManager = new ChoosebestManager_1.ChoosebestManager(this.language, this.helper, this.saveRollbackManager, this.randomManager, params.defaultAmong || 5);
        this.saidManager = new SaidManager_1.SaidManager();
        this.refsManager = new RefsManager_1.RefsManager(this.saveRollbackManager, this.genderNumberManager, this.randomManager);
        this.adjectiveManager = new AdjectiveManager_1.AdjectiveManager(this.languageImpl, this.genderNumberManager, this.synManager, this.saveRollbackManager, this.helper);
        this.possessiveManager = new PossessiveManager_1.PossessiveManager(this.languageImpl, this.genderNumberManager, this.refsManager, this.helper);
        this.valueManager = new ValueManager_1.ValueManager(this.languageImpl, this.refsManager, this.genderNumberManager, this.randomManager, this.adjectiveManager, this.helper, this.possessiveManager, this.synManager, this.saveRollbackManager, this.languageImpl.languageCommon.constants);
        this.asmManager = new AsmManager_1.AsmManager(this.saveRollbackManager, this.randomManager, this.valueManager, this.helper);
        this.sentenceManager = new SentenceManager_1.SentenceManager(this.languageImpl, this.verbsManager, this.valueManager, this.adjectiveManager, this.synManager, this.helper);
        this.saveRollbackManager.bindObjects(this.saidManager, this.refsManager, this.genderNumberManager, this.randomManager, this.synManager, this.verbsManager);
        // ValueManager is created lately
        this.languageImpl.setValueManager(this.valueManager);
        this.refsManager.setValueManager(this.valueManager);
        // spy is supposed to be set later on when using templates
        // but we can always create a default one!
        this.setSpy(new Spy_1.SpyNoPug());
    }
    setEmbeddedLinguisticResources(embeddedLinguisticResources) {
        this.embeddedLinguisticResources = embeddedLinguisticResources;
        if (this.embeddedLinguisticResources) {
            // verbs
            // WHY does it look different for words and adj?
            // => DictManager has not been implemented for verbs yet, that's all
            this.verbsManager.setEmbeddedVerbs(this.embeddedLinguisticResources.verbs);
            // words and adj
            // fr + de
            this.languageImpl.getDictManager().setEmbeddedWords(this.embeddedLinguisticResources.words);
            this.languageImpl.getDictManager().setEmbeddedAdj(this.embeddedLinguisticResources.adjectives);
        }
    }
    // when using Pug
    setSpy(spy) {
        this.spy = spy;
        // transfer knowledge
        this.valueManager.setSpy(spy);
        this.synManager.setSpy(spy);
        this.choosebestManager.setSpy(spy);
        this.refsManager.setSpy(spy);
        this.adjectiveManager.setSpy(spy);
        this.asmManager.setSpy(spy);
        this.helper.setSpy(spy);
        this.possessiveManager.setSpy(spy);
        this.sentenceManager.setSpy(spy);
        this.saveRollbackManager.setSpy(spy);
        this.verbsManager.setSpy(spy);
    }
    // call is generated by pug-code-gen
    getFiltered() {
        return rosaenlg_filter_1.filter(this.spy.getPugHtml(), this.languageImpl.getLanguageCommon(), { renderDebug: this.renderDebug });
    }
    getSaidManager() {
        return this.saidManager;
    }
    getLanguageImpl() {
        return this.languageImpl;
    }
}
exports.NlgLib = NlgLib;
//# sourceMappingURL=NlgLib.js.map