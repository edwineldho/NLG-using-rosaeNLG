/**
 * @license
 * Copyright 2019 Ludan StoecklÃ©
 * SPDX-License-Identifier: Apache-2.0
 */
import { RandomManager } from './RandomManager';
import { ValueManager } from './ValueManager';
import { SaveRollbackManager } from './SaveRollbackManager';
import { Helper } from './Helper';
import { SpyI } from './Spy';
declare type ListType = 'ul' | 'ol';
declare type MixinFctOrString = MixinFct | string;
export interface Asm {
    mode: 'single_sentence' | 'sentences' | 'paragraphs' | 'list' | 'combined';
    mix?: boolean;
    assembly: (len: number, nonEmptyElts: number[]) => Asm;
    separator?: MixinFctOrString;
    last_separator?: MixinFctOrString;
    if_empty?: MixinFctOrString;
    begin_with_1?: MixinFctOrString;
    begin_with_general?: MixinFctOrString;
    begin_last_1?: MixinFctOrString;
    begin_last?: MixinFctOrString;
    end?: MixinFctOrString;
    list_capitalize?: boolean;
    list_end_item?: MixinFctOrString;
    list_type?: ListType;
    list_intro?: MixinFctOrString;
    asms?: Array<Asm>;
    max?: number;
}
declare type MixinFct = (elt: any, extraParams?: any) => void;
export declare class AsmManager {
    private saveRollbackManager;
    private randomManager;
    private valueManager;
    private helper;
    private spy;
    setSpy(spy: SpyI): void;
    constructor(saveRollbackManager: SaveRollbackManager, randomManager: RandomManager, valueManager: ValueManager, helper: Helper);
    private runMixinOrValue;
    private foreach;
    assemble(which: MixinFct, asm: Asm, size: number, params: any): void;
    private mixinIsEmpty;
    private listStuffCombined;
    private listStuff;
    private isMixin;
    private outputStringOrMixinHelper;
    private outputStringOrMixin;
    private isDot;
    private getBeginWithElement;
    private listStuffSentencesHelper;
    private insertSeparatorSentences;
    private getBeginningOfElement;
    private getListType;
    private getListHtmlSuffix;
    private listPutStart;
    private listPutEnd;
    private listStuffSentences;
    private insertSeparatorSingleSentence;
    private singleSentenceGetBeginning;
    private listStuffSingleSentence;
    /**
     * Mixes array in place. ES6 version
     * @param {Array} a items An array containing the items.
     * I do not use the shuffle included in random-js because I need to use my own getNextRnd function
     */
    private mix;
}
export {};
