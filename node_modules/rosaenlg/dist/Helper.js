"use strict";
/**
 * @license
 * Copyright 2019 Ludan Stoecklé
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Helper = void 0;
class Helper {
    constructor(genderNumberManager, saveRollbackManager, languageImpl, renderDebug) {
        this.genderNumberManager = genderNumberManager;
        this.saveRollbackManager = saveRollbackManager;
        this.languageImpl = languageImpl;
        this.renderDebug = renderDebug;
        this.separatingSpace = this.languageImpl.spacesWhenSeparatingElements ? '¤' : '';
    }
    setSpy(spy) {
        this.spy = spy;
    }
    // use it only for debug purposes
    /*
    public getSpyForDebugOnly(): SpyI {
      return this.spy;
    }
    */
    getSeparatingSpace() {
        return this.separatingSpace;
    }
    insertSeparatingSpaceIfRequired() {
        this.spy.appendPugHtml(this.separatingSpace);
    }
    insertValEscaped(val) {
        const escaped = val.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        this.spy.appendPugHtml(this.separatingSpace + escaped + this.separatingSpace);
    }
    insertValUnescaped(val) {
        this.spy.appendPugHtml(this.separatingSpace + val + this.separatingSpace);
    }
    getSorP(table, obj) {
        if (!table || table.length < 2) {
            const err = new Error();
            err.name = 'InvalidArgumentError';
            err.message = 'you must provide a table with 2 elements: S + P';
            throw err;
        }
        const number = this.genderNumberManager.getRefNumber(obj, null);
        if (number === 'P') {
            return table[1];
        }
        // default: number===null || number==='S'
        return table[0];
    }
    getMFN(table, obj) {
        const gender = this.genderNumberManager.getRefGender(obj, null);
        if (!table || table.length === 0) {
            const err = new Error();
            err.name = 'InvalidArgumentError';
            err.message = `you must provide a table with elements MF(N)`;
            throw err;
        }
        if (gender === 'M') {
            return table[0];
        }
        else if (gender === 'F') {
            if (table.length < 2) {
                const err = new Error();
                err.name = 'InvalidArgumentError';
                err.message = `${obj} is Feminine, you must provide a table with 2 elements MF`;
                throw err;
            }
            return table[1];
        }
        else if (gender === 'N') {
            if (table.length < 3) {
                const err = new Error();
                err.name = 'InvalidArgumentError';
                err.message = `${obj} is Neutral, you must provide a table with 3 elements MFN`;
                throw err;
            }
            return table[2];
        }
        else {
            const err = new Error();
            err.name = 'InvalidArgumentError';
            err.message = `getMFN but ${JSON.stringify(obj)} has no gender`;
            throw err;
        }
    }
    isSentenceStart() {
        /*
          .   xxxx
          .xxx
          do not work on inline
    
          > xxxx
          >xxx
          warning because not true on all tags: : </b> is not an end of sentence
        */
        if (/\.[\s|¤]*$/.test(this.spy.getPugHtml())) {
            return true;
        }
        if (/>[\s|¤]*$/.test(this.spy.getPugHtml())) {
            return true;
        }
        return false;
    }
    getUppercaseWords(str) {
        if (str && str.length > 0) {
            if (this.saveRollbackManager.isEvaluatingEmpty) {
                return 'SOME_WORDS';
            }
            else {
                return str.replace(/\b\w/g, function (l) {
                    return l.toUpperCase();
                });
            }
        }
    }
    hasFlag(params, flag) {
        if (this.getFlagValue(params, flag)) {
            return true;
        }
        else {
            return false;
        }
    }
    getFlagValue(params, flag) {
        if (params) {
            if (flag) {
                return params[flag];
            }
            else {
                const err = new Error();
                err.name = 'InvalidArgumentError';
                err.message = 'getFlagValue flag value must not be null';
                throw err;
            }
        }
        else {
            return null;
        }
    }
    protectString(str) {
        return '§' + str + '§';
    }
    getHtmlWithoutRenderDebug(originalHtml) {
        // remove debug traces
        if (this.renderDebug) {
            // must be non greedy
            return originalHtml.replace(/<span class="rosaenlg-debug" id=".*?"><\/span>/g, '');
        }
        else {
            return originalHtml;
        }
    }
    htmlHasNotChanged(htmlBefore) {
        // what has been added?
        let trimmedAdded = this.spy.getPugHtml().substring(htmlBefore.length);
        trimmedAdded = this.getHtmlWithoutRenderDebug(trimmedAdded);
        // we must remove spaces and ¤ before comparing
        trimmedAdded = trimmedAdded.replace(/[\s|¤]/g, '');
        return trimmedAdded === '';
    }
}
exports.Helper = Helper;
//# sourceMappingURL=Helper.js.map