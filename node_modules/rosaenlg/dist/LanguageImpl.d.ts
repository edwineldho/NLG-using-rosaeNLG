/**
 * @license
 * Copyright 2019 Ludan StoecklÃ©
 * SPDX-License-Identifier: Apache-2.0
 */
import { Genders, Numbers } from './NlgLib';
import { GenderNumberManager, WithGender, WithNumber } from './GenderNumberManager';
import { RefsManager } from './RefsManager';
import { Helper } from './Helper';
import { AdjPos, ValueManager } from './ValueManager';
import { ConjParams, VerbParts } from './VerbsManager';
import { SpyI } from './Spy';
import { Locale as dateFnsLocale } from 'date-fns';
import { LanguageCommon, DictManager, VerbsInfo } from 'rosaenlg-commons';
export declare type DetTypes = 'DEFINITE' | 'INDEFINITE' | 'DEMONSTRATIVE' | 'POSSESSIVE';
export { Numbers } from './NlgLib';
export interface DetParams {
    genderOwned: Genders;
    numberOwned: Numbers;
    genderOwner: Genders;
    numberOwner: Numbers;
    case?: string;
    dist?: string;
    after?: string;
    useTheWhenPlural?: boolean;
    adjectiveAfterDet?: boolean;
    forceDes?: boolean;
}
export interface AgreeAdjParams extends WithGender, WithNumber {
    adjPos: AdjPos;
    case?: string;
    det: DetTypes;
}
export interface GrammarParsed {
    gender: Genders;
    number: Numbers;
    adj: string;
    det: DetTypes;
    adjPos: AdjPos;
    noun: string;
    unknownNoun: boolean;
}
export declare type SomeTense = string | UniversalTense;
declare type UniversalTense = 'UNIVERSAL_PRESENT' | 'UNIVERSAL_PERFECT' | 'UNIVERSAL_PLUPERFECT' | 'UNIVERSAL_FUTURE' | 'UNIVERSAL_PAST';
export declare abstract class LanguageImpl {
    iso2: string;
    readonly langForNumeral: string;
    readonly langForDateFns: dateFnsLocale;
    readonly defaultDateFormat = "yyyy-MM-dd";
    readonly n2wordsLang: string;
    readonly n2wordsLib: (_: number, options: any) => string;
    readonly floatingPointWord: string;
    readonly table0to9: string[];
    readonly hasGender: boolean;
    readonly hasNeutral: boolean;
    readonly defaultAdjPos: string;
    readonly hasCase: boolean;
    readonly defaultCase: string;
    readonly userGenderOwnedForGender: boolean;
    readonly eatSpaceWhenAdjEndsWithApostrophe: boolean;
    readonly supportsInvertSubjectVerb: boolean;
    readonly defaultTense: string;
    readonly canPopVerbPart: boolean;
    readonly defaultLastSeparatorForAdjectives: string;
    readonly universalMapping: Record<UniversalTense, string>;
    readonly spacesWhenSeparatingElements: boolean;
    protected valueManager: ValueManager;
    protected dictHelper: any;
    languageCommon: LanguageCommon;
    abstract getSubstantive(subst: string, number: Numbers, _theCase: string): string;
    constructor(languageCommon: LanguageCommon);
    setValueManager(valueManager: ValueManager): void;
    getDictManager(): DictManager;
    getLanguageCommon(): LanguageCommon;
    getDefaultLastSeparatorForAdjectives(): string;
    getDet(_det: DetTypes, _params: DetParams): string;
    getAgreeAdj(_adjective: string, _gender: Genders, _number: Numbers, _subject: any, _params: AgreeAdjParams): string;
    getWordGender(_word: string): Genders;
    getOrdinal(_val: number, _gender: Genders): string;
    getFormatNumberWithNumeral(val: number, format: string): string;
    getOrdinalNumber(val: number, _gender: Genders): string;
    getTextualNumber(val: number, _gender: Genders): string;
    private getTextualNumberFloatPart;
    getStdFormatedNumber(val: number): string;
    getFormattedDate(date: Date, dateFormat: string): string;
    getFormattedNominalGroup(possessiveAdj: string, adjBefore: string, substantive: string, adjAfter: string): string;
    parseSimplifiedString(_val: string): GrammarParsed;
    thirdPossessionTriggerRef(_owner: any, _owned: any, _params: any, _spy: SpyI, _helper: Helper, _genderNumberManager: GenderNumberManager): void;
    thirdPossessionRefTriggered(_owner: any, _owned: any, _params: any, _spy: SpyI, _genderNumberManager: GenderNumberManager): void;
    recipientPossession(_owned: any, _spy: SpyI, _refsManager: RefsManager, _helper: Helper): void;
    getConjugation(_subject: any, _verb: string, _tense: SomeTense, _number: Numbers, _conjParams: ConjParams, _genderNumberManager: GenderNumberManager, _embeddedVerbs: VerbsInfo, _verbParts: VerbParts): string;
    isPlural(_val: number): boolean;
    protected solveTense(originalTense: string): string;
}
