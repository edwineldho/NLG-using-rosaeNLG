"use strict";
/**
 * @license
 * Copyright 2019 Ludan Stoecklé
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LanguageFilterSpanish = void 0;
const LanguageFilter_1 = require("./LanguageFilter");
class LanguageFilterSpanish extends LanguageFilter_1.LanguageFilter {
    constructor() {
        super(...arguments);
        this.cleanSpacesPunctuationDoDefault = true;
    }
    contractions(input) {
        let res = input;
        // de + el => del
        res = this.contract2elts('de', 'el', 'del', res);
        // a + el => al
        res = this.contract2elts('a', 'el', 'al', res);
        return res;
    }
    cleanSpacesPunctuation(input) {
        let res = input;
        const regexSpanishPunct = new RegExp(`([¡¿])(${this.constants.spaceOrNonBlockingClass}*)`, 'g');
        res = res.replace(regexSpanishPunct, (_match, punct, after) => {
            return `${punct}${after.replace(/\s/g, '')}`;
        });
        return res;
    }
    addCapsSpecific(input) {
        let res = input;
        const triggerCapsNoSpace = '[¡¿]';
        const regexCapsAfterDot = new RegExp(`(${triggerCapsNoSpace})(${this.constants.spaceOrNonBlockingClass}*)([${this.constants.tousCaracteresMinMajRe}])`, 'g');
        res = res.replace(regexCapsAfterDot, (_match, punct, before, firstWord) => {
            // same as above but without added space
            return `${punct}${before.replace(/\s/g, '')}${firstWord.toUpperCase()}`;
        });
        return res;
    }
}
exports.LanguageFilterSpanish = LanguageFilterSpanish;
//# sourceMappingURL=LanguageFilterSpanish.js.map