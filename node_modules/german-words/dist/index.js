"use strict";
/**
 * @license
 * Copyright 2019 Ludan Stoeckl√©
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGenderGermanWord = exports.getCaseGermanWord = exports.getWordInfo = void 0;
function getWordInfo(wordsList, word) {
    if (!wordsList) {
        const err = new Error();
        err.name = 'InvalidArgumentError';
        err.message = `words list cannot be null`;
        throw err;
    }
    if (wordsList[word]) {
        return wordsList[word];
    }
    else {
        const err = new Error();
        err.name = 'NotFoundInDict';
        err.message = `${word} was not found in German dict`;
        throw err;
    }
}
exports.getWordInfo = getWordInfo;
function getCaseNumber(wordsList, caseKey, numberKey, word) {
    if (wordsList && wordsList[word] && wordsList[word][caseKey] && wordsList[word][caseKey][numberKey]) {
        return wordsList[word][caseKey][numberKey];
    }
    else {
        return null;
    }
}
function getCaseGermanWord(wordsListExceptions, wordsList, word, germanCase, number) {
    if (number != 'S' && number != 'P') {
        const err = new Error();
        err.name = 'InvalidArgumentError';
        err.message = `number must be S or P`;
        throw err;
    }
    const casesMapping = {
        NOMINATIVE: 'NOM',
        ACCUSATIVE: 'AKK',
        DATIVE: 'DAT',
        GENITIVE: 'GEN',
    };
    if (!casesMapping[germanCase]) {
        const err = new Error();
        err.name = 'TypeError';
        err.message = `${germanCase} is not a supported German case`;
        throw err;
    }
    const caseKey = casesMapping[germanCase];
    const numberKey = number == 'S' ? 'SIN' : 'PLU';
    const caseNumber = getCaseNumber(wordsListExceptions, caseKey, numberKey, word) || getCaseNumber(wordsList, caseKey, numberKey, word);
    if (caseNumber) {
        return caseNumber;
    }
    else {
        const err = new Error();
        err.name = 'NotFoundInDict';
        err.message = `${word} was not found in German dict for case and number`;
        throw err;
    }
}
exports.getCaseGermanWord = getCaseGermanWord;
function getGender(wordsList, word) {
    if (wordsList && wordsList[word] && wordsList[word]['G']) {
        return wordsList[word]['G'];
    }
    else {
        return null;
    }
}
function getGenderGermanWord(wordsListExceptions, wordsList, word) {
    const gender = getGender(wordsListExceptions, word) || getGender(wordsList, word);
    if (gender) {
        return gender;
    }
    else {
        const err = new Error();
        err.name = 'NotFoundInDict';
        err.message = `${word} was not found in German dict for gender`;
        throw err;
    }
}
exports.getGenderGermanWord = getGenderGermanWord;
//# sourceMappingURL=index.js.map